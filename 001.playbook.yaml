- name: play1
  hosts: all
  tasks:
    - name: Task1 of play1
      ansible.builtin.debug:
        msg: "Hai from task1 of play1"

    - name: Task2 of play1
      ansible.builtin.debug:
        msg: "Hai from task2 of play1"

- name: play2
  hosts: all
  tasks:
    - name: Task1 of play2
      ansible.builtin.debug:
        msg: "Hai from task1 of play2"

    - name: Task2 of play2
      ansible.builtin.debug:
        msg: "Hai from task2 of play2"

# File paths
device_list_file = "/export/home/xc04437/var.csv"  # Replace with your actual CSV file path containing devices
output_file_path = "/export/home/xc04437/routing_instances.csv"  # Replace with your desired output file path


import csv
import pexpect

# File paths
device_list_file = "/export/home/xc04437/var.csv"  # Replace with your actual CSV file path containing devices
output_file_path = "/export/home/xc04437/routing_instances.csv"  # Replace with your desired output file path

# Function to run commands on a device
def run_command(device, command):
    try:
        # Start a session with the device
        child = pexpect.spawn("roci {}".format(device))

        # Wait for the prompt
        child.expect('>')

        # Send the command
        child.sendline(command)
        child.expect('>')  # Wait for the command to complete

        # Get the output
        output = child.before.decode('utf-8')

        # Send exit to properly close the session
        child.sendline('exit')
        child.expect(pexpect.EOF)
        child.close()

        return output

    except pexpect.exceptions.ExceptionPexpect as e:
        print("Error running command on device {}: {}".format(device, e))
        return ""

# Read devices from the CSV file
with open(input_file_path, mode="r") as csv_file:
    reader = csv.reader(csv_file)
    devices = [row[0] for row in reader]

# Initialize list to store data
all_instance_data = []

# Process each device
for device in devices:
    print("Processing device: {}".format(device))
    
    # Run commands on the device
    config_output = run_command(device, "show configuration routing-instances | display set | match \"interface|instance-type\" | no-more")
    interface_output = run_command(device, "show interfaces descriptions | no-more")
    
    # Process the outputs
    instance_data = []
    instance_name = None
    service_type = None

    for line in config_output.strip().splitlines():
        if line.startswith("set routing-instances"):
            parts = line.split()
            if 'instance-type' in parts:
                instance_name = parts[2]
                service_type = parts[-1]
            elif 'interface' in parts and instance_name and service_type:
                interface = parts[-1]
                instance_data.append((instance_name, service_type, interface))

    interface_descriptions = {}
    for line in interface_output.strip().splitlines():
        if line.startswith("Interface"):
            continue
        parts = line.split()
        interface_name = parts[0]
        description = ' '.join(parts[3:])
        interface_descriptions[interface_name] = description

    for instance_name, service_type, interface in instance_data:
        main_interface, sub_interface = (interface.split(".", 1) + [""])[:2]
        description = interface_descriptions.get(main_interface, "")
        connection_type = description.split('|')[0] if description else ""
        
        all_instance_data.append({
            "Device": device,
            "Routing Instance": instance_name,
            "Service type": service_type,
            "Interface": interface,
            "Main Interface": main_interface,
            "Sub interface": sub_interface,
            "Connection type": connection_type,
        })

# Write all data to the CSV file
with open(output_file_path, mode="w", newline="") as csv_file:
    fieldnames = ["Device", "Routing Instance", "Service type", "Interface", "Main Interface", "Sub interface", "Connection type"]
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(all_instance_data)

print("CSV file '{}' updated successfully with data from all devices.".format(output_file_path))
